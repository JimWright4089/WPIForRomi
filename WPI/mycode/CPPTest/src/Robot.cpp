// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include <stdio.h>
#include "Robot.h"
#include "StopWatch.h"
#include "DriverStation.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<SimpleSubsystem> Robot::simpleSubsystem;
std::unique_ptr<OI> Robot::oi;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION


  std::shared_ptr<NetworkTable> tables;
  double count = 0.0;
  bool debugPrint = false;
  StopWatch* mStopWatchAuto;
  DriverStation& mDriverStation = DriverStation::GetInstance();
int mOldAlliance = 0;
int mOldLocation = 0;


void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    simpleSubsystem.reset(new SimpleSubsystem());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());

	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand.reset(new AutonomousCommand());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    mStopWatchAuto = new StopWatch(5000);
    tables = NetworkTable::GetTable("datatable");
    printf("\033[1;34m---RobotInit---\033[0m\n");
    debugPrint = false;
  }

  /**
   * This function is called once each time the robot enters tele-operated mode
   */
  void Robot::DisabledInit()
  {
    printf("\033[1;34m---DisabledInit---\033[0m\n");
    debugPrint = false;
  }

void Robot::DisabledPeriodic() {
    if(false == debugPrint)
    {
      debugPrint = true;
      printf("\033[1;34m---DisabledPeriodic---\033[0m\n");
    }

    if((mOldAlliance != mDriverStation.GetAlliance())||(mOldLocation != mDriverStation.GetLocation()))
    {
      printf("All:%d %d\n",mDriverStation.GetAlliance(),mDriverStation.GetLocation());
      mOldAlliance = mDriverStation.GetAlliance();
      mOldLocation = mDriverStation.GetLocation();
    }
    Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
    printf("\033[1;34m---AutonomousInit---\033[0m\n");
	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Start();
    debugPrint = false;
    mStopWatchAuto->Reset();

}

void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();

    if(false == debugPrint)
    {
      debugPrint = true;
      printf("\033[1;34m---AutonomousPeriodic---\033[0m\n");
    }

    if(!mStopWatchAuto->IsExpired())
    {
      printf("\033[91;1m---Waiting---:%ld\033[0m\n",mStopWatchAuto->GetTimeLeft());
    }

    double theSin = sin(count);
    double theCos = cos(count);
  
    tables->PutNumber("sin",theSin);
    tables->PutNumber("cos",theCos);
    tables->PutNumber("double",theSin*100.0);
//    printf("Count:%d\n",count);
    count += 0.01;
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Cancel();
    printf("\033[1;34m---TeleInit---\033[0m\n");
    debugPrint = false;
}

void Robot::TeleopPeriodic() {
	Scheduler::GetInstance()->Run();
	//printf("%f %f\n",Robot::oi->getSimpleStick()->GetRawAxis(0),Robot::oi->getSimpleStick()->GetRawAxis(1));
    if(false == debugPrint)
    {
      debugPrint = true;
      printf("\033[1;34m---TelePeriodic---\033[0m\n");
    }

}

void Robot::TestInit() {
    printf("\033[1;34m---TestInit---\033[0m\n");
    debugPrint = false;
}

void Robot::TestPeriodic() {
    if(false == debugPrint)
    {
      debugPrint = true;
      printf("\033[1;34m---TestPeriodic---\033[0m\n");
    }

    lw->Run();
}

START_ROBOT_CLASS(Robot)

