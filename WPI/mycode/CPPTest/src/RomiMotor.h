//----------------------------------------------------------------------------
//
//  $Workfile: RomiMotor.h$
//
//  $Revision: X$
//
//  Project:    WPI for PI
//
//                            Copyright (c) 2017
//                               James A Wright
//                            All Rights Reserved
//
//  Modification History:
//  $Log:
//  $
//
//----------------------------------------------------------------------------
#pragma once

#include <stdint.h>

#include <memory>
#include <string>

#include "SpeedController.h"
#include "I2C.h"


namespace frc 
{
    //----------------------------------------------------------------------------
    //  Class Declarations
    //----------------------------------------------------------------------------
    //
    // Class Name: RomiMotor
    // 
    // Purpose:
    //      This class sends and recieves I2C commands to run the motors
    //
    //----------------------------------------------------------------------------
    class RomiMotor : public SpeedController
    {
    public:
        //----------------------------------------------------------------------------
        // Purpose:
        //      Constructor
        //
        //----------------------------------------------------------------------------
        RomiMotor(I2C::Port port, int deviceAddress);

        //----------------------------------------------------------------------------
        // Purpose:
        //      Return the current power being sent to the motor
        //
        //----------------------------------------------------------------------------
        double Get() const;

        //----------------------------------------------------------------------------
        // Purpose:
        //      Set the power being sent to the motor
        //
        //----------------------------------------------------------------------------
        void Set(double value);

        //----------------------------------------------------------------------------
        // Purpose:
        //      Set the motor to left(true) or right(false)
        //
        //----------------------------------------------------------------------------
        void SetLeftMotor(bool isLeft);

        //----------------------------------------------------------------------------
        // Purpose:
        //      Set the flag that tells the motor to invert things
        //
        //----------------------------------------------------------------------------
        void SetInverted(bool isInverted);

        //----------------------------------------------------------------------------
        // Purpose:
        //      Stop the motors
        //
        //----------------------------------------------------------------------------
        void Disable();

        //----------------------------------------------------------------------------
        // Purpose:
        //      Returns if the motor is inverted
        //
        //----------------------------------------------------------------------------
        bool GetInverted() const;

        //----------------------------------------------------------------------------
        // Purpose:
        //      Stop the motors
        //
        //----------------------------------------------------------------------------
        void StopMotor();

        //----------------------------------------------------------------------------
        // Purpose:
        //      PID Write
        //
        //----------------------------------------------------------------------------
        void PIDWrite(double output);

    protected:
        //----------------------------------------------------------------------------
        //  Class Attrubutes
        //----------------------------------------------------------------------------
        const double MAX_POWER = 300.0;

        //----------------------------------------------------------------------------
        //  Class Attrubutes
        //----------------------------------------------------------------------------
        I2C mI2C;
        I2C::Port mPort;
        int mDeviceAddress;
        double mP;
        double mI;
        double mD;
        double mSetPower;
        bool mInverted;
        bool mLeftMotor;

        //----------------------------------------------------------------------------
        // Purpose:
        //      Calculate the check byte, this class needs refactoring for inheitance
        //
        //----------------------------------------------------------------------------
        uint8_t CalcCheckByte(uint8_t* data, uint8_t start, uint8_t number);
    };

}